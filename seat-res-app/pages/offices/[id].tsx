import React, { ReactElement } from "react";
import Head from "next/head";
import Link from "next/link";
import client from "../../apollo-client";
import { format } from "date-fns";
import { GetStaticProps, Office, Params } from "../../types";
import { Layout, Button, Card, PageTitle, Subheading, Icon } from "../../components/ui";
import { OfficeManagerModal, OfficeManagersTable } from "./components";
import { useModalStore } from "../../stores";
import { getOffice, getOffices, getUsers } from "../../services/queries";
import { useMutation, useQuery } from "@apollo/client";
import { createOfficeManager } from "../../services/mutations";
import { useRouter } from "next/router";

interface OfficeProps {
  officeData: Office;
}

export default function OfficePage({ officeData }: OfficeProps) {
  const router = useRouter();
  const openModal = useModalStore((state) => state.setIsOpen);
  const { data: users } = useQuery(getUsers);
  const [addOfficeManager, { data, loading, error }] = useMutation(createOfficeManager);

  const refreshData = () => {
    router.replace(router.asPath);
  };

  const formattedCreatedAt = format(new Date(officeData.createdAt), "dd/MM/yyyy");

  return (
    <main className="px-8 py-2">
      <Head>
        <title>Seat Reservation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageTitle margin="mb-0">
        {officeData.name}
        <Button primary onClick={() => {}}>
          Edit
        </Button>
      </PageTitle>
      <Subheading>
        <div>Created on {formattedCreatedAt}</div>
        <div>
          Located in{" "}
          <Link href={`/buildings/${officeData.building?.id}`}>
            <a>{officeData.building?.name}</a>
          </Link>
        </div>
      </Subheading>
      <Card className="w-96">
        <div className="flex justify-between items-center font-semibold text-lg px-4 pb-2 mb-4 border-b border-gray-300">
          Office Managers
          <Icon
            icon="add"
            width={16}
            height={16}
            className="cursor-pointer hover:text-blue-500"
            onClick={() =>
              openModal(true, {
                cancelText: "Cancel",
                confirmText: "Save",
                content: <OfficeManagerModal />,
                data: { office: officeData, users: users.users },
                title: "Add Office Manager",
                onConfirmAction: (data) => {
                  console.log(data);
                  addOfficeManager({
                    variables: {
                      userId: parseInt(data.selectedUser.value),
                      officeId: parseInt(data.office.id),
                    },
                  });
                  refreshData();
                },
              })
            }
          />
        </div>
        <OfficeManagersTable data={officeData.officeManagers} />
      </Card>
    </main>
  );
}

OfficePage.setLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

// We prerender the pages using the static paths function due to the estimated lack of
// offices within the database. This might not be scalable? Need to read more of the docs

export async function getStaticPaths() {
  const { data } = await client.query({ query: getOffices });
  const paths = data.offices.map((office: Office) => ({
    params: { id: office.id.toString() },
  }));
  return { paths, fallback: "blocking" };
}

export async function getStaticProps({ params }: GetStaticProps) {
  const data = await officeQuery(params);
  return {
    props: {
      officeData: data.office,
    },
  };
}

export const officeQuery = async (params: Params) => {
  const id = parseInt(params.id);
  const { data } = await client.query({
    query: getOffice,
    variables: { id },
  });

  return data;
};
