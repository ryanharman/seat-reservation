import React, { ReactElement } from "react";
import Head from "next/head";
import Link from "next/link";
import client from "../../apollo-client";
import { format } from "date-fns";
import { GetStaticProps, Office, Params } from "../../types";
import { Layout, Button, Card, PageTitle, Subheading, Icon, CardHeader } from "../../components/ui";
import { OfficeManagerModal, OfficeManagersTable, OfficeModal } from "./components";
import { useModalStore } from "../../stores";
import { useMutation, useQuery } from "@apollo/client";
import { useRouter } from "next/router";
import {
  refreshData,
  createOfficeManager,
  getOffice,
  getOffices,
  getUsers,
  updateOffice,
} from "../../services";

interface OfficeProps {
  officeData: Office;
}

export default function OfficePage({ officeData }: OfficeProps) {
  const router = useRouter();
  const openModal = useModalStore((state) => state.setIsOpen);
  const { data: users } = useQuery(getUsers);
  const [addOfficeManager, __] = useMutation(createOfficeManager);
  const [editOffice, _] = useMutation(updateOffice);

  const formattedCreatedAt = format(new Date(officeData.createdAt), "dd/MM/yyyy");

  const editOfficeModal = () => {
    openModal(true, {
      cancelText: "Cancel",
      confirmText: "Save",
      content: <OfficeModal />,
      data: {
        officeName: officeData.name,
        selectedBuilding: { value: officeData.building?.id, label: officeData.building?.name },
      },
      title: "Edit Office",
      onConfirmAction: (data) => {
        editOffice({
          variables: {
            id: officeData.id,
            name: { set: data.officeName },
            buildingId: parseInt(data.selectedBuilding.value),
          },
        });
        refreshData(router);
      },
    });
  };

  const addOfficeManagerModal = () => {
    openModal(true, {
      cancelText: "Cancel",
      confirmText: "Save",
      content: <OfficeManagerModal />,
      data: { office: officeData, users: users.users },
      title: "Add Office Manager",
      onConfirmAction: (data) => {
        addOfficeManager({
          variables: {
            userId: parseInt(data.selectedUser.value),
            officeId: parseInt(data.office.id),
          },
        });
        refreshData(router);
      },
    });
  };

  return (
    <main className="px-8 py-2">
      <Head>
        <title>Seat Reservation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageTitle margin="mb-0">
        {officeData.name}
        <Button primary onClick={() => editOfficeModal()}>
          Edit
        </Button>
      </PageTitle>
      <Subheading>
        <div>Created on {formattedCreatedAt}</div>
        <div>
          Located in{" "}
          <Link href={`/buildings/${officeData.building?.id}`}>
            <a>{officeData.building?.name}</a>
          </Link>
        </div>
      </Subheading>
      <div className="flex gap-8">
        <Card className="w-1/2">
          <CardHeader>Recent Reservations</CardHeader>
        </Card>
        <Card className="w-1/2">
          <CardHeader>
            Managers
            <Icon
              icon="add"
              width={16}
              height={16}
              className="cursor-pointer hover:text-blue-500"
              onClick={() => addOfficeManagerModal()}
            />
          </CardHeader>
          <OfficeManagersTable data={officeData.officeManagers} />
        </Card>
      </div>
    </main>
  );
}

OfficePage.setLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

// We prerender the pages using the static paths function due to the estimated lack of
// offices within the database. This might not be scalable? Need to read more of the docs

export async function getStaticPaths() {
  const { data } = await client.query({ query: getOffices });
  const paths = data.offices.map((office: Office) => ({
    params: { id: office.id.toString() },
  }));
  return { paths, fallback: "blocking" };
}

export async function getStaticProps({ params }: GetStaticProps) {
  const data = await officeQuery(params);
  return {
    props: {
      officeData: data.office,
    },
  };
}

export const officeQuery = async (params: Params) => {
  const id = parseInt(params.id);
  const { data } = await client.query({
    query: getOffice,
    variables: { id },
  });

  return data;
};
